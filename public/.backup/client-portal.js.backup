const { out: stdout, err: stderr } = require('../logger')('stddev', 'client-portal');
const idutil = require('../id-util')();
const dbconn = require('../db');

const lobbyctr = require('../lobby');

const defaultLobby = 'Lobby';
const defaultNamespace = '/';

const timestamp = () => new Date().getTime().toString();

var io;
var guestNumber = 1;
var namesUsed = [];
var nicknames = {};
var currentRoom = {};

function ClientPortal(server, port, ws) {
    this.server = server;
    this.port = port;
    this.ws = ws;

    this.lobbydb = dbconn.newLobbyDatabase();
    this.userdb = dbconn.newUserDatabase();

    this.allRoomNamesAsArray = () => [...this.lobbydb.allRoomNames()];
}

ClientPortal.prototype.handleClientConnections = function () {
    io = this.ws;

    this.globalLobby = this.lobbydb.newLobby(defaultLobby, defaultNamespace);
    this.GLOBALLOBBY = lobbyctr.newLobby('Main Lobby', io.of('/main-lobby'));
    this.GLOBALLOBBY.bindHandlers();

    stdout.log(
        `created default chatroom on init`,
        `roomname: ${this.globalLobby.name}`,
        `namespace: ${this.globalLobby.namespace}`,
        `id: ${this.globalLobby.id}`,
        `users: ${[...this.globalLobby.users]}`,
        `size: ${this.globalLobby.size()}`
    );

    io.on('connection', socket => {
        socket.emit('prompt-user-login');

        stdout.log('client connected', `addr: ${socket.client.request.url}`);
        stdout.log('available chatrooms', `${this.allRoomNamesAsArray()}`);

        socket.on('user-login-submit', credentials => {
            const { name, password } = credentials;

            const account = {
                isvalid: false,
                user: undefined
            };

            if (this.userdb.userExists(name, password)) {
                const enteredValidPassword = this.userdb.validateUserPassword(name, password);

                if (enteredValidPassword) {
                    account.isvalid = true;
                    account.user = this.userdb.loadExisting(name, password);
                }
            }

            if (!account.isvalid) {  // TODO: ask first before creating the user ...
                account.isvalid = true;
                account.user = this.userdb.registerNew(name, password);
            }

            stdout.log(
                `handled user login`,
                `username: ${account.user.name}`,
                `password: ${account.user.password}`,
                `id: ${account.user.id}`,
                `valid: ${account.isvalid}`
            );

            socket.emit('user-login-complete', account);
        });

        socket.on('user-joined-lobby', (onjoin) => {
            let { lobbyname, ns, user } = onjoin;

            if (lobbyname === 'default') {
                lobbyname = 'Lobby'
                ns = '/';
            }

            if (this.lobbydb.lobbyExists(lobbyname)) {
                const joined = this.lobbydb.joinLobby(lobbyname, user.name, user.id, true);

                if (joined) {
                    socket.join(lobbyname);

                    const roomsize = this.lobbydb.lobbySize(lobbyname);

                    const joinnotification = {
                        texts: [
                            `[${timestamp()}]`,
                            `[${user.name} has joined the chatroom ...]`,
                            `[${roomsize} users currently in lobby]`
                        ]
                    };

                    socket.emit('user-joined-lobby-success', { lobbyname: lobbyname });
                    io.in(lobbyname).emit('notify-lobby-user-joined', joinnotification);
                } else {
                    stdout.log('that user is already in the lobby', `user: ${user.name}`, `lobby ${lobbyname}`);
                }
            } else {
                stdout.log('a lobby with that name doesnt exist', `lobbyname: ${lobbyname}`);
            }

            stdout.log('handler: user joined lobby', `lobby: ${lobbyname}`, `namespace: ${ns}`);
        });

        socket.on('user-joined-chatroom', () => {
            stdout.log('handler called: user joined a chatroom');
        });

        socket.on('chatroom-created', (roomname) => {
            stdout.log('handler called: chat room created');
            const roomnames = [...this.lobbydb.allRoomNames()].push(roomname);
            io.of('/').emit('refresh-room-list-panel', roomnames);
        });
    });

    this.server.listen(this.port, () => {
        stdout.log('serving ...', `port: ${this.port}`);
    });
};

// const event_userJoinedChatroom = 'user-joined-chatroom';
const event_userSentChatMessage = 'user-sent-chat-message';
const event_serverRefreshedRoomList = 'server-refreshed-room-list';

// const joinExistingChatroom = (socket, username, id, roomname) => {
//     if (!dbconn.roomExists(roomname)) {
//         stdout.err(`chatroom doesn't exist`, `${roomname}`);
//         return false;
//     }

//     const joined = dbconn.joinChatroom(roomname, username, id, true);

//     if (!joined) {
//         stdout.log('user already in room');
//         return false;
//     }

//     const roomsize = dbconn.roomSize(roomname);
//     const notification = {
//         text: `${username} has joined the chatroom ...\n(${roomsize} users currently in lobby).`
//     };

//     socket.join(roomname);

//     socket.emit(event_userJoinedChatroom, { username: username, roomname: roomname, size: roomsize });
//     socket.emit(event_userSentChatMessage, notification);

//     socket.broadcast.to(roomname).emit(event_userSentChatMessage, notification);

//     stdout.log(`joined a chatroom`, `user: ${username}`, `chatroom: ${roomname}`, `roomsize: ${roomsize}`);
// };

// const createNewChatroom = (roomname, socket) => {
//     if (dbconn.roomExists(roomname)) {
//         stdout.err(`chatroom with that name already exists`, `roomname: ${roomname}`);
//         return false;
//     };

//     socket.emit('chatroom-created', roomname);

//     // socket.of('/').emit(event_serverRefreshedRoomList, existingChatroomsByName);

//     return dbconn.createChatroom(roomname);
// };

// const updateRoomList = socket => {
//     const rooms = socket.rooms;

//     // todo...
// }

module.exports = (server, port, ws) => new ClientPortal(server, port, ws);

/*
* original code below this comment ...
*/

// exports.listen = function (server, port) {
function deprecatedSeeThecommentedOutBit(server, port) {
    io = require("socket.io")(server);

    io.sockets.on('connection', function (socket) {
        stdout.log('client connected', `addr: ${socket.client.request.url}`);

        guestNumber = assignGuestName(socket, guestNumber, nicknames, namesUsed);

        joinRoom(socket, 'Lobby');

        handleMessageBroadcasting(socket, nicknames);
        handleNameChangeAttempts(socket, nicknames, namesUsed);
        handleRoomJoining(socket);

        socket.on('rooms', function () {
            socket.emit('rooms', io.of('/').adapter.rooms);
        });

        handleClientDisconnection(socket, nicknames, namesUsed);
    });

    server.listen(port, function () {
        console.log("serving static content on port: " + port)
    });
};

function assignGuestName(socket, guestNumber, nicknames, namesUsed) {
    var name = 'Guest' + guestNumber;

    nicknames[socket.id] = name;

    socket.emit('nameResult', { success: true, name: name });

    namesUsed.push(name);

    return guestNumber + 1;
}

function joinRoom(socket, room) {
    socket.join(room);

    currentRoom[socket.id] = room;

    socket.emit('joinResult', { room: room });
    socket.broadcast.to(room).emit('message', {
        text: nicknames[socket.id] + ' has joined ' + room + ' ...'
    });

    var usersInRoom = io.of('/').in(room).clients;

    if (usersInRoom.length > 1) {
        var usersInRoomSummary = 'Users currently in ' + room + ': ';

        for (var index in usersInRoom) {
            var userSocketId = usersInRoom[index].id;

            if (userSocketId != socket.id) {
                if (index > 0) {
                    usersInRoomSummary += ', ';
                }

                usersInRoomSummary += nicknames[userSocketId];
            }
        }

        usersInRoomSummary += ' ...';

        socket.emit('message', { text: usersInRoomSummary });
    }
}

function handleNameChangeAttempts(socket, nicknames, namesUsed) {
    socket.on('nameAttempt', function (name) {
        if (name.indexOf('Guest') === 0) {
            socket.emit('nameResult', {
                success: false,
                message: 'names cannot begin with "Guest" ...'
            });
        } else {
            if (namesUsed.indexOf(name) === -1) {
                var previousName = nicknames[socket.id];
                var previousNameIndex = namesUsed.indexOf(previousName);

                namesUsed.push(name);
                nicknames[socket.id] = name;

                delete namesUsed[previousNameIndex];

                socket.emit('nameResult', { success: true, name: name });
                socket.broadcast.to(currentRoom[socket.id]).emit('message', {
                    text: previousName + ' is now known as ' + name + ' ...'
                });
            } else {
                socket.emit('nameResult', {
                    success: false,
                    message: 'That name is already in use ...'
                });
            }
        }
    });
}

function handleMessageBroadcasting(socket) {
    socket.on('message', function (message) {
        socket.broadcast.to(message.room).emit('message', {
            text: nicknames[socket.id] + ': ' + message.text
        });
    });
}

function handleRoomJoining(socket) {
    socket.on('join', function (room) {
        socket.leave(currentRoom[socket.id]);
        joinRoom(socket, room.newRoom);
    });
}

function handleClientDisconnection(socket) {
    socket.on('disconnect', function () {
        var nameIndex = namesUsed.indexOf(nicknames[socket.id]);

        delete namesUsed[nameIndex];
        delete nicknames[socket.id];
    });
}
