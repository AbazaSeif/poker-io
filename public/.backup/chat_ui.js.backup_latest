const log = (...s) => console.log(`${s.map(m => `${m}\n`).join('')}`);


function divEscapedContentElement(message) {
    return $('<div></div>').text(message);
}

function divSystemContentElement(message) {
    return $('<div></div>').html('<i>' + message + '</i>');
}

function processUserInput(chatApp, socket) {
    var message = $('#send-message').val();
    var systemMessage = false;

    if (message.charAt(0) === '/') {
        systemMessage = chatApp.processCommand(message);

        if (systemMessage) {
            $('#messages').append(divSystemContentElement(systemMessage));
        }
    } else {
        chatApp.sendMessage(
            $('#room').text(),
            message
        );

        $('#messages').append(divEscapedContentElement(message));
        $('#messages').scrollTop($('#messages').prop('scrollHeight'));
    }

    $('#send-message').val('');
}

const slide = (divs, show) => {
    if (show) {
        log('showing divs');
        for (const d of divs) {
            $(`#${d}`).show();
        }
    } else {
        log('hiding divs (slide)');
        for (const d of divs) {
            $(`#${d}`).slideUp();
        }
    }
};

const formatId = id => `#${id}`;
const formatClass = c => `.${c}`;
const loadHtmlSnippet = (selector, filepath, onload) => {
    $(`${selector}`).load(`${filepath}`, onload ? onload : () => { /* placeholder, empty function */ });
};

const unloadHtmlSnippet = selector => {
    let e = document.getElementById(`${selector}`);
    e.parentNode.removeChild(e);
};

const toggleVisible = (on, selectors) => {
    let option = '';

    if (!on) {
        option = 'none';
    }

    for (s of selectors) {
        document.getElementById(`${s}`).style.display = option;
    }
};

const fade = (out, selectors, selectorsAreClasses) => {
    let formatter = formatId;

    if (selectorsAreClasses) {
        formatter = formatClass;
    }

    if (!out) {
        for (s of selectors) {
            $(formatter(s)).fadeIn('slow');
        }
    } else {
        for (s of selectors) {
            $(formatter(s)).fadeOut('slow');
        }
    }
};

const slowFade = (out, selector) => out ? $(selector).fadeOut('slow') : $(selector).fadeIn('slow');

const appendText = text => $('<div></div>').html('<i>' + text + '</i>');

const selector = {
    id: {
        grid: {
            section: {
                banner: 'grid-section-banner',
                info: 'grid-section-info',
                nav: 'grid-section-nav',
                lobby: {
                    container: 'grid-section-lobby',
                    left: 'section-lobby-left',
                    right: 'section-lobby-right',
                    game: 'section-lobby-game'
                }
            }
        },
        login: {
            prompt: 'prompt-account-login'
        },
        chat: {
            room: 'room',
            roomlist: 'room-list',
            messages: 'messages',
            sendform: 'send-form',
            help: 'help'
        }
    }
}

const event = {
    prompt: {
        accountlogin: 'prompt-user-for-login-credentials'
    }
}

$(document).ready(function () {
    var url = window.location.origin;
    var socket = io.connect(url);

    log('connected', `host ${url}`);

    var chatApp = new Chat(socket);

    /*
    * custom code
    */

    const div_chatRoomWidgets = ['room', 'room-list', 'messages', 'send-form', 'help'];
    const div_userAccountLoginPrompt = 'prompt-account-login';
    // const div_lobby = 'grid-section-info';
    // const div_lobby_playerProfileHeader = 'player-profile-header';
    // const div_lobby_tableList = 'table-list';
    // const div_lobby_profileName = 'profile-account-username';
    // const div_lobby_profileAccountBalance = 'profile-account-balance';
    // const form_userAccountLogin = 'user-account-login-form';

    // const event_promptUserAccountLogin = 'prompt-user-for-login-credentials';

    socket.on(event.prompt.accountlogin, () => {
        log('prompted user for account login credentials');
        slowFade(true, selector.id.chat.room);
        slowFade(true, selector.id.chat.roomlist);
        slowFade(true, selector.id.chat.messages);
        slowFade(true, selector.id.chat.sendform);
        slowFade(true, selector.id.chat.help);
        slowFade(true, selector.id.grid.section.lobby.container);
        // fade(true, div_chatRoomWidgets);
        fade(true, ['grid-section-lobby']);
    });

    loadHtmlSnippet(formatId(div_userAccountLoginPrompt), '/form.html');

    $('#prompt-account-login').on('submit', '#user-account-login-form', () => {
        log('user account login credentials submitted');

        const name = $('#send-name').val();
        const pw = $('#send-pw').val();

        socket.emit('user-validate-cred', { name: name, password: pw }, (valid) => {
            if (valid) {
                fade(false, div_chatRoomWidgets);
                fade(false, ['grid-section-lobby']);
                fade(true, ['user-account-login-form']);

                loadHtmlSnippet('#grid-section-info', '/lobby.html', () => {
                    $('#profile-account-username').append(appendText(`Profile Name: ${name}`));
                    $('#profile-account-balance').append(appendText('Acount Balance: 10000 chips'));
                });
            } else {
                log('um,invalid login details ... idk bro');
            }
        });

        return false;
    });


    /*
    * original code
    */

    socket.on('nameResult', function (result) {
        var message;

        console.log('name result called ...');

        if (result.success) {
            message = 'You are now known as ' + result.name + ' ...';
        } else {
            message = result.message;
        }

        $('#messages').append(divSystemContentElement(message));
    });

    socket.on('joinResult', function (result) {
        console.log('join result called ...');
        $('#room').text(result.room);
        $('#messages').append(divSystemContentElement('Room changed.'));
    });

    socket.on('message', function (message) {
        console.log('message called ...');
        $('#messages').append(
            $('<div></div>').text(message.text)
        );
    });

    socket.on('rooms', function (rooms) {
        console.log('rooms called ...');
        $('#room-list').empty();

        for (var room in rooms) {
            room = room.substring(1, room.length);

            if (room !== '') {
                $('#room-list').append(divEscapedContentElement(room));
            }
        }

        $('#room-list div').click(function () {
            chatApp.processCommand('/join ' + $(this).text());
            $('#send-message').focus();
        });
    });

    setInterval(function () {
        socket.emit('rooms');
    }, 1000);

    $('#send-message').focus();
    $('#send-form').submit(function () {
        processUserInput(chatApp, socket);
        return false;
    });

    console.log("just set the socket conn ... " + socket.connected);
    console.log('doc.ready: set up chat app ui');
});
